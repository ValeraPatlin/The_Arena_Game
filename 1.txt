//connect parameters  -------------------
    //power - сила
    connect(power, QOverload<int>::of(&QSpinBox::valueChanged), [power, &parameters_point]()
            {
                if (parameters_point > 0)
                {
                    qDebug() << "click2------" << power->value() << parameters_point;
                    --parameters_point;
                }
                qDebug() << "click" << power->value() << parameters_point;

            });

    //dexterity - ловкость
    connect(dexterity, QOverload<int>::of(&QSpinBox::valueChanged), [dexterity, parameters_point]()
            {
                if (parameters_point != 0)
                {

                }
                qDebug() << "click" << dexterity->value();
            });

    //endurance - выносливость
    connect(endurance, QOverload<int>::of(&QSpinBox::valueChanged), [endurance, parameters_point]()
            {
                qDebug() << "click" << endurance->value();
            });

    //intelligence - интелект
    connect(intelligence, QOverload<int>::of(&QSpinBox::valueChanged), [intelligence, parameters_point]()
            {
                qDebug() << "click" << intelligence->value();
            });

    //spirit - дух
    connect(spirit, QOverload<int>::of(&QSpinBox::valueChanged), [spirit, parameters_point]()
            {
                qDebug() << "click" << spirit->value();
            });


//--------------------------------------------------------------
//создание виджетов для параметров персонажа
//и записи их в класс Player
QHBoxLayout* Character_creation_menu::create_spin_box(int& param)
{
    QSpinBox* spin_box = new QSpinBox;

    spin_box->setButtonSymbols(QAbstractSpinBox::NoButtons);
    spin_box->setMaximum(20);
    spin_box->setFixedSize(25, 25);
    spin_box->setReadOnly(true);

    QPushButton* plus = new QPushButton("+");
    QPushButton* minus = new QPushButton("-");

    plus->setFixedSize(25, 30);
    minus->setFixedSize(25, 30);

//Font
    QFont font;
    font.setPixelSize(16);
    spin_box->setFont(font);
    plus->setFont(font);
    minus->setFont(font);

//conntect
    connect(plus, &QPushButton::clicked, [this, spin_box, &param]()
            {
                int num = spin_box->value();
                if (parameters_point != 0)
                {
                    spin_box->setValue(++num);
                    --parameters_point;
                    label_param_point(spin_box, param);
                }
            });
    connect(minus, &QPushButton::clicked, [this, spin_box, &param]()
            {
                int num = spin_box->value();
                if (num != 0)
                {
                    spin_box->setValue(--num);
                    ++parameters_point;
                    label_param_point(spin_box, param);
                }
            });

    QHBoxLayout* h_box = new QHBoxLayout;

    h_box->addWidget(minus);
    h_box->addWidget(spin_box);
    h_box->addWidget(plus);

    return h_box;
}

void Character_creation_menu::label_param_point(QSpinBox *spin_box, int &param)
{
    str_parameters_point->setNum(parameters_point);
    param = spin_box->value();

    //test-------------------------------------------------------------------------------------
    player->print();
}





Цель данного проекта создать RPG в процедурно генерируемом открытом мире. При каждой новой партии создавался новый мир с уникальными квестами, противниками и подземельями. Каждый элемент игры представлять из себя отдельный виджет со своей логикой и взаимодействующий с другими виджетами. Графика создается при помощи DAZ Studio

Данный проект пишется на Qt 5.15 с использованием системы сборки QMake














